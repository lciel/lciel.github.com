<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bitmap | Unmotivated]]></title>
  <link href="http://blog.lciel.jp/blog/categories/bitmap/atom.xml" rel="self"/>
  <link href="http://blog.lciel.jp/"/>
  <updated>2014-04-09T21:09:55+09:00</updated>
  <id>http://blog.lciel.jp/</id>
  <author>
    <name><![CDATA[lciel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android の Resources における画像(Drawable)についての話]]></title>
    <link href="http://blog.lciel.jp/blog/2014/03/09/about-resources-and-drawables/"/>
    <updated>2014-03-09T02:13:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2014/03/09/about-resources-and-drawables</id>
    <content type="html"><![CDATA[<p>Android で Resources から getDrawable() などして画像をとった場合、一体それはいつどんなタイミングでメモリに読み込まれているのか？
キャッシュはされているのか？</p>

<p>いい加減把握しておきたかったので、これも調べました。</p>

<p>API 17(4.2.2_r1)で見た結果なので、他のバージョンのSDKでも同様かはわかりませんが、多分同じ感じだと思います。</p>

<!-- more -->


<h2>リソース画像は getDrawable() 時に初めてメモリにロードされる</h2>

<p>リソースの画像ファイルは、いい感じに起動時にロードしてメモリにキャッシュしてくれているのだろうと思っていたのですが、
普通に<strong>「Resources#getDrawable() 時に初めてファイルからメモリへロードされる」</strong>というのが正解でした。</p>

<p>そもそも、Resources からメモリにビットマップが展開されると、デフォルトの RGBA_8888 で読み込まれるため、
たとえば読み込まれた結果 600 x 800 ピクセルになる画像でも、色情報だけで600*800*4byteで約1.9MBとなり、
全部ロードしておくなどというのは到底無茶な話でした。</p>

<p>一度読み込んだビットマップは Resources がキャッシュしてくれています。
ただし WeakReference で保持されているため、実参照を切ったら割と簡単に消えそうです。</p>

<p>まとめると以下のようになります。</p>

<ul>
<li><strong>getDrawable() のタイミングでファイルI/Oが発生する</strong></li>
<li><strong>Resources の画像はキャッシュはされるが揮発性が高い</strong></li>
</ul>


<p>ちなみに上記は BitmapDrawable についての話でしたが、 ColorDrawable についても同様で、
getDrawable() のタイミングで生成されており、同様に WeakReference によるキャッシュも作成されていました。</p>

<h2>一部のシステムリソースは常にメモリに乗っている</h2>

<p>getDrawable() 時にファイルからロードされると書きましたが、一部のシステムリソースは preload としてシステムの起動時に読み込まれ、常にメモリ上に乗っているようです。<br/>
なので、このシステムリソースを使う際は、ファイルI/Oなし、かつ追加でメモリを消費することなく使えてお得そうです。</p>

<p>具体的には以下に書かれた Drawable が preload としてシステムの起動時に読み込まれていました。</p>

<ul>
<li><a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.2.2_r1/frameworks/base/core/res/res/values/arrays.xml">core/res/res/values/arrays.xml</a>

<ul>
<li>preloaded_drawables</li>
<li>preloaded_color_state_lists</li>
</ul>
</li>
</ul>


<h2>(おまけ)画面密度ごとに画像ファイルを作るべき？</h2>

<p>リソースを読み込む際、ざっと見た感じ density の値を考慮して、BitmapFactory.Options の inScreenDensity を設定して Bitmap を読み込んでいます。<br/>
そのため、メモリ上に保持される Bitmap は画面密度にあったサイズ(容量)になります。</p>

<p>「画面密度の小さい端末(例えばmdpi)で、大きい画面密度の画像(例えばxhdpi)を読み込むとメモリを余計に食うので、画面密度にあった画像を用意するべき」
という tips がありますが、これって正しいの？という疑問を持ったので、こちらも軽く調べました。</p>

<p>結論から言うと、<strong>「自分より大きい画面密度の画像に限定されず、画面密度が異なる画像を読み込むと余計にメモリもCPUも食う」</strong>ということになりそうです。
なんてこった。<br/>
ただし、メモリを余計に食うのは Bitmap 生成時のみです。</p>

<p>BitmapFactory.createFromResourcesStream() などで Bitmap を生成する場合、 inScreenDensity などが inDensity と異なって設定されている場合、
一度原寸大で Bitmap を生成し、その Bitmap から Bitmap.createScaledBitmap() で density にあった scale された画像を作るようです。
原寸大の Bitmap はその後すぐ recycle() されていますが、原寸大と scale された両方の Bitmap がメモリ上にロードされることになります。</p>

<p>というわけで、画面密度にあったサイズの画像を用意した方が、メモリとCPUに優しいということになりそうです。</p>

<p>シェアが多い hdpi xhdpi あたりはカバーしといた方が良さそうです。<br/>
<a href="https://developer.android.com/about/dashboards/index.html">dashboard</a> ではまだそうでもないですが、体感的には xxhdpi もかなり増えてる気がします。<br/>
アプリサイズとのにらみ合いが辛い今日この頃。</p>
]]></content>
  </entry>
  
</feed>
