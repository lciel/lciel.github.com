<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TouchEvent | Unmotivated]]></title>
  <link href="http://blog.lciel.jp/blog/categories/touchevent/atom.xml" rel="self"/>
  <link href="http://blog.lciel.jp/"/>
  <updated>2014-04-09T21:08:22+09:00</updated>
  <id>http://blog.lciel.jp/</id>
  <author>
    <name><![CDATA[lciel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GestureDetector でリスナに渡ってくる MotionEvent が null になる]]></title>
    <link href="http://blog.lciel.jp/blog/2014/02/27/onfling-onscroll-getting-a-null-motionevent/"/>
    <updated>2014-02-27T19:30:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2014/02/27/onfling-onscroll-getting-a-null-motionevent</id>
    <content type="html"><![CDATA[<p>タッチジェスチャを検出する場合は、 GestureDetector に次のようなリスナを渡して判定するのが常套手段ですが、<a href="http://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onScroll%28android.view.MotionEvent,%20android.view.MotionEvent,%20float,%20float%29">onScroll()</a> や <a href="http://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onFling%28android.view.MotionEvent,%20android.view.MotionEvent,%20float,%20float%29">onFling()</a> の第一引数の e1 にはジェスチャの開始地点の MotionEvent が入ります。<br/>
ところが、時々 e1 に null が渡ってくることがあって困りました。</p>

<p>``` java
private class MyGestureListener extends SimpleOnGestureListener {</p>

<pre><code>@Override
public boolean onScroll(MotionEvent e1, MotionEvent e2,
        float distanceX, float distanceY) {
    // なぜか e1 が null !!
    return true;
}

@Override
public boolean onFling(MotionEvent e1, MotionEvent e2,
        float velocityX, float velocityY) {
    // なぜか e1 が null !!
    return true;
}
</code></pre>

<p>}
```</p>

<p>ググるといくつか stackoverflow が見つかったけど、どれも根本解決には至っていない様子。</p>

<ul>
<li><a href="http://stackoverflow.com/questions/4151385/android-simpleongesturelistener-onfling-getting-a-null-motionevent">Android SimpleOnGestureListener.onFling getting a null MotionEvent</a></li>
<li><a href="http://stackoverflow.com/questions/17390873/onfling-motionevent-e1-null">OnFling MotionEvent e1 null?</a></li>
</ul>


<p>というわけで、原因を調べてみました。</p>

<p>結論を先に言うと、 ACTION_DOWN のタッチイベント(MotionEvent)を GestureDetector#onTouchEvent() に渡せていないのが原因でした。</p>

<!-- more -->


<h2>原因特定</h2>

<p>GestureDetector のコードを見てみる。</p>

<p>``` java GestureDetector.java(2.2_r1)
public boolean onTouchEvent(MotionEvent ev) {</p>

<pre><code>// ...

if (mIsDoubleTapping) {
    // Give the move events of the double-tap
    handled |= mDoubleTapListener.onDoubleTapEvent(ev);
} else if (mAlwaysInTapRegion) {
    final int deltaX = (int) (x - mCurrentDownEvent.getX());
    final int deltaY = (int) (y - mCurrentDownEvent.getY());
    int distance = (deltaX * deltaX) + (deltaY * deltaY);
    if (distance &gt; mTouchSlopSquare) {
        // onScroll が呼ばれる
        handled = mListener.onScroll(mCurrentDownEvent, ev, scrollX, scrollY);
        mLastMotionX = x;
        mLastMotionY = y;
        mAlwaysInTapRegion = false;
        mHandler.removeMessages(TAP);
        mHandler.removeMessages(SHOW_PRESS);
        mHandler.removeMessages(LONG_PRESS);
    }
    if (distance &gt; mBiggerTouchSlopSquare) {
        mAlwaysInBiggerTapRegion = false;
    }
} else if ((Math.abs(scrollX) &gt;= 1) || (Math.abs(scrollY) &gt;= 1)) {
    // onScroll が呼ばれる
    handled = mListener.onScroll(mCurrentDownEvent, ev, scrollX, scrollY);
    mLastMotionX = x;
    mLastMotionY = y;
}

// ...

if (mIsDoubleTapping) {
    // Finally, give the up event of the double-tap
    handled |= mDoubleTapListener.onDoubleTapEvent(ev);
} else if (mInLongPress) {
    mHandler.removeMessages(TAP);
    mInLongPress = false;
} else if (mAlwaysInTapRegion) {
    handled = mListener.onSingleTapUp(ev);
} else {

    // A fling must travel the minimum tap distance
    final VelocityTracker velocityTracker = mVelocityTracker;
    velocityTracker.computeCurrentVelocity(1000, mMaximumFlingVelocity);
    final float velocityY = velocityTracker.getYVelocity();
    final float velocityX = velocityTracker.getXVelocity();

    if ((Math.abs(velocityY) &gt; mMinimumFlingVelocity)
            || (Math.abs(velocityX) &gt; mMinimumFlingVelocity)){
        // onFling が呼ばれる
        handled = mListener.onFling(mCurrentDownEvent, ev, velocityX, velocityY);
    }
}

// ...
</code></pre>

<p>}
```</p>

<p>どちらも mCurrentDownEvent がそのまま渡されるだけなので、 mCurrentDownEvent を確認する。</p>

<p>``` java GestureDetector.java(2.2_r1)
public boolean onTouchEvent(MotionEvent ev) {</p>

<pre><code>// ...

case MotionEvent.ACTION_DOWN:
    // ...
    if (mCurrentDownEvent != null) {
        mCurrentDownEvent.recycle();
    }
    mCurrentDownEvent = MotionEvent.obtain(ev);

// ...
</code></pre>

<p>}
```</p>

<p>というわけで ACTION_DOWN のイベントを GestureDetector#onTouchEvent() に渡せていないのが原因でした。</p>

<p>ジェスチャを判定したい View において dispatchTouchEvent() や onInterceptTouchEvent() なんかでイベントの分配をしている状況だと、 View の onTouchEvent() に ACTION_DOWN の MotionEvent が渡らなかったりするので、そう言うときに発生していたみたい。</p>

<p>今回は別のところでタッチ時の情報を保存していたので、その情報を使って e1 の代わりとさせました。<br/>
そもそも GestureDetector が ACTION_DOWN 時に色々初期化しているので、これを渡せないと onScroll() とか onFling() は判定されたものの、そもそも全く判定されないジェスチャが盛りだくさんかと思われます。<br/>
ちゃんと全てのイベントを渡せるようにした方がよさそう。</p>

<p>ちなみに、どんな時でもジェスチャを判定させたいなら View#dispatchTouchEvent() で GestureDetector#onTouchEvent() を呼び出したりすれば、ややこしいことは一切抜きで子供の View に邪魔されずにジェスチャ判定できたりします。(その View にタッチイベントが回って来てさえいれば:<a href="http://blog.lciel.jp/blog/2013/12/03/android-touch-event/">参考</a>)</p>

<h2>余談</h2>

<p>GestureDetector のジェスチャ判定のためのパラメータを変更できないのかな？と前々から疑問に思っていたのでついでに読んでみたけど、どうも定数がぶち込まれるようになっているのでやっぱりできないっぽいです。<br/>
onFling() で拾った後に velocity でさらに絞る&hellip;とかいつもやっているので、 GestureDetector 自体にパラメータを渡せた方が楽そうなんだけど&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android のタッチイベントを理解する(その2)]]></title>
    <link href="http://blog.lciel.jp/blog/2013/12/12/android-touch-event-2/"/>
    <updated>2013-12-12T21:32:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/12/12/android-touch-event-2</id>
    <content type="html"><![CDATA[<h2>Activity にタッチイベントが流れてくるまで</h2>

<p><a href="/blog/2013/12/03/android-touch-event/">前回</a>は View のヒエラルキーのなかをどうやってタッチイベントが伝搬するかを追いました。<br/>
参考にした資料には、 Activity#dispatchTouchEvent() からイベントが始まるとありますが、折角なのでそこまではどうなっているかも確認します。</p>

<p>先に概要としてまとめてしまうとこんな雰囲気でした。</p>

<p><img src="/images/android-touch-event-flow.png" alt="Activity に渡るまでのタッチイベント概要" /></p>

<p>View システムの根っこの部分をきちんと理解できてないので、勘違いがあるかもしれません。
(親子関係が特に怪しい)</p>

<!-- more -->


<h3>参考にしたスタックトレース</h3>

<p>206SH(Android 4.2.2) でとったものなので、完全に純正なコードでない可能性もありますが参考にしつつ追っていきます。</p>

<p>``` text
12-02 22:58:25.726: D/TOUCH_TEST(27219):</p>

<pre><code>at onTouch(TouchTest.java:35)
at dispatchTouchEvent(View.java:7319)
at dispatchTransformedTouchEvent(ViewGroup.java:2205)
at dispatchTouchEvent(ViewGroup.java:1948)
at dispatchTransformedTouchEvent(ViewGroup.java:2205)
at dispatchTouchEvent(ViewGroup.java:1948)
at dispatchTransformedTouchEvent(ViewGroup.java:2205)
at dispatchTouchEvent(ViewGroup.java:1948)
at dispatchTransformedTouchEvent(ViewGroup.java:2205)
at dispatchTouchEvent(ViewGroup.java:1948)
at dispatchTransformedTouchEvent(ViewGroup.java:2205)
at dispatchTouchEvent(ViewGroup.java:1948)
at dispatchTransformedTouchEvent(ViewGroup.java:2205)
at dispatchTouchEvent(ViewGroup.java:1948)
at dispatchTransformedTouchEvent(ViewGroup.java:2205)
at dispatchTouchEvent(ViewGroup.java:1948)
at superDispatchTouchEvent(PhoneWindow.java:1974)
at superDispatchTouchEvent(PhoneWindow.java:1426)
at dispatchTouchEvent(Activity.java:2417)
at dispatchTouchEvent(PhoneWindow.java:1922)
at dispatchPointerEvent(View.java:7504)
at deliverPointerEvent(ViewRootImpl.java:3356)
at deliverInputEvent(ViewRootImpl.java:3301)
at doProcessInputEvents(ViewRootImpl.java:4436)
at enqueueInputEvent(ViewRootImpl.java:4415)
at onInputEvent(ViewRootImpl.java:4507)
at dispatchInputEvent(InputEventReceiver.java:179)
at nativePollOnce(MessageQueue.java:-2)
at next(MessageQueue.java:125)
at loop(Looper.java:124)
/**
 * ↑ActivityThread の Looper にイベントが登録されてくるようなので、ここからみていく
 * ----
 * ↓ここまでは Activity が Zygote によって立ち上げられている関係上、スタックトレースにのってきているっぽい
 */
at main(ActivityThread.java:5159)
at invokeNative(Method.java:-2)
at invoke(Method.java:511)
at run(ZygoteInit.java:810)
at main(ZygoteInit.java:577)
at main(NativeStart.java:-2)
</code></pre>

<p>```</p>

<h3>Activity 配下の View へとタッチイベントがわたるまで</h3>

<p>このあたりのメソッドの引き回し方は、マイナバージョンの変更でもちょこちょこ変わっているようで、たとえば 4.2.2 と 4.3 でも違いがありました。<br/>
大枠の流れまでは変わっていなそうでしたので、スタックトレースと比較するために 4.2.2 でコードを追っています。</p>

<ul>
<li>どこかの誰かが ActivityThread の Looper にイベントを登録してくる(どこの誰かは今のところ追えてません)</li>
<li>ActivityThread の Looper がメッセージを dispatch していくなかで、入力イベントを ViewRootImpl の onInputEvent() に渡す</li>
<li>ViewRootImpl にて、入力イベントのキューを順に処理していく</li>
</ul>


<p>``` java ViewRootImpl#deliverInputEvent()
private void deliverInputEvent(QueuedInputEvent q) {</p>

<pre><code>Trace.traceBegin(Trace.TRACE_TAG_VIEW, "deliverInputEvent");
try {
    if (q.mEvent instanceof KeyEvent) {
        deliverKeyEvent(q);
    } else {
        final int source = q.mEvent.getSource();
        if ((source &amp; InputDevice.SOURCE_CLASS_POINTER) != 0) {
            // タッチイベントは SOURCE_CLASS_POINTER に分類されるため、 deliverPointerEvent() が呼ばれる
            // ここに分類されるのはマウス、ペン、タッチ、トラックボールなどらしい
            deliverPointerEvent(q);
        } else if ((source &amp; InputDevice.SOURCE_CLASS_TRACKBALL) != 0) {
            deliverTrackballEvent(q);
        } else {
            deliverGenericMotionEvent(q);
        }
    }
} finally {
    Trace.traceEnd(Trace.TRACE_TAG_VIEW);
}
</code></pre>

<p>}
```</p>

<ul>
<li>キューからイベントを抽出して、 DecorView にポインタイベントとして流す</li>
</ul>


<p>``` java ViewRootImpl#deliverPointerEvent()
private void deliverPointerEvent(QueuedInputEvent q) {</p>

<pre><code>final MotionEvent event = (MotionEvent)q.mEvent;

// 中略

// タッチイベントを View ヒエラルキーに流していく
// 通常、 mView には Activity のルートビューとなる DecorView が入っているはず
boolean handled = mView.dispatchPointerEvent(event);
if (MEASURE_LATENCY) {
    lt.sample("B Dispatched PointerEvents ", System.nanoTime() - event.getEventTimeNano());
}

// タッチイベントの処理が返ってきたら、イベントキューを完了させる
// handled で分岐しているが native method に入ってしまうので、今回は追ってません
if (handled) {
    finishInputEvent(q, true);
    return;
}

// Pointer event was unhandled.
finishInputEvent(q, false);
</code></pre>

<p>}
```</p>

<ul>
<li>DecorView の親クラス(View)でタッチイベントと判定して dispatch する</li>
</ul>


<p>``` java View#dispatchPointerEvent()
public final boolean dispatchPointerEvent(MotionEvent event) {</p>

<pre><code>if (event.isTouchEvent()) {
    // 今回はタッチイベントなのでこちら
    return dispatchTouchEvent(event);
} else {
    return dispatchGenericMotionEvent(event);
}
</code></pre>

<p>}
```</p>

<ul>
<li>DecorView にて Callback として登録されている Activity に、一旦イベントを流す</li>
</ul>


<p>``` java PhoneWindow.DecorView#dispatchTouchEvent()
public boolean More dispatchTouchEvent(MotionEvent ev) {</p>

<pre><code>// callback には通常 Activity が登録されている
final Callback cb = getCallback();
return cb != null &amp;&amp; !isDestroyed() &amp;&amp; mFeatureId &lt; 0 ? cb.dispatchTouchEvent(ev)
        : super.dispatchTouchEvent(ev);
</code></pre>

<p>}
```</p>

<ul>
<li>Activity にてユーザからの入力があったことを表す <a href="http://developer.android.com/reference/android/app/Activity.html#onUserInteraction%28%29">onUserInteraction()</a> などを呼びながら、再度 DecorView にイベントを dispatch し、子供の View (Activity#addContentView()したViewたち)へとタッチイベントを流していく</li>
</ul>


<p>``` java Activity#dispatchTouchEvent()
public boolean dispatchTouchEvent(MotionEvent ev) {</p>

<pre><code>// キータッチの開始なら onUserInteraction() が呼ばれる
if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    onUserInteraction();
}
// ここで一旦 DecorView(FrameLayoutを継承) にイベントを戻し、ここから ViewGroup の dispatchTouchEvent() が呼ばれて、タッチイベントの旅が始まる
if (getWindow().superDispatchTouchEvent(ev)) {
    return true;
}
// イベントがキャンセルされずにココまで到達したら、最後に Activity のタッチイベントが呼ばれる
return onTouchEvent(ev);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android のタッチイベントを理解する(その1)]]></title>
    <link href="http://blog.lciel.jp/blog/2013/12/03/android-touch-event/"/>
    <updated>2013-12-03T20:31:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/12/03/android-touch-event</id>
    <content type="html"><![CDATA[<p>タッチイベントがうまく流れてこなくて困ったり、自力でイベントをルーティングしたりするときに困ったりと、ちょこちょことタッチイベントについて勉強したのでまとめておきます。<br/>
主にタッチイベントがどう流れてどう止まるかなどについて調べています。</p>

<p>イベントの流れを理解するには以下の資料がかなり参考になりました。</p>

<ul>
<li><a href="http://devsbuild.it/files/PRE_andevcon_mastering-the-android-touch-system.pdf">Mastering the Android Touch System (PDF)</a></li>
</ul>


<p>毎度のことながら、間違いがありましたらご指摘頂ければ幸いです。</p>

<!-- more -->


<h2>タッチイベントを処理する主要なメソッド</h2>

<p>実際の流れを理解する前に、主要なメソッドを三つ紹介しておきます。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> <strong>メソッド名</strong> </th>
<th align="left"> <strong>概要</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> onTouchEvent() (<a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent">View</a>) </td>
<td align="left"> タッチイベントに対して何かを処理するメソッド。setOnTouchListener() で登録した listener はこのタイミングで呼び出される。</td>
</tr>
<tr>
<td></td>
<td align="left"> onInterceptTouchEvent() (<a href="http://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent">ViewGroup</a>) </td>
<td align="left"> タッチイベントが子供へと伝搬することを阻止できるメソッド。</td>
</tr>
<tr>
<td></td>
<td align="left"> dispatchTouchEvent() (<a href="http://developer.android.com/reference/android/app/Activity.html#dispatchTouchEvent(android.view.MotionEvent">Activity</a>, <a href="http://developer.android.com/reference/android/view/View.html#dispatchTouchEvent(android.view.MotionEvent">View</a>, <a href="http://developer.android.com/reference/android/view/ViewGroup.html#dispatchTouchEvent(android.view.MotionEvent">ViewGroup</a>) </td>
<td align="left"> タッチイベントを受け取り、子に伝搬させるかどうか、自分が処理するかどうかなどを管理する。onInterceptTouchEvent() や onTouchEvent() を呼ぶ人。</td>
</tr>
</tbody>
</table>


<p>　</p>

<h2>基本的なタッチイベントの流れ</h2>

<p>タッチイベントは Activity を経由して PhoneWindow 直下の DecorView から伝搬が始まり、親の View からその子 View へと dispatchTouchEvent() なるメソッドを通じて伝搬していきます。</p>

<p>dispatchTouchEvent() は 自身が ViewGroup だった場合、まず自身の onInterceptTouchEvent() を呼び出します。
onInterceptTouchEvent() では子にイベントを渡すかどうかなどを判断します(後で詳しく説明します)。</p>

<p>次に、子の dispatchTouchEvent() を呼び出してイベントを渡していきます。
このとき、親が子の dispatchTouchEvent() を呼び出す順番は、一番新しく追加した子から古い子へと逆順に渡していきます。</p>

<p>そして、最後に一般的にタッチイベントを処理するメソッドである onTouchEvent() が dispatchTouchEvent() によって呼ばれます。
この onTouchEvent() は、子から親へと逆順(ユーザから見ると手前に表示されている順)に流れていくようになっています。</p>

<p>文章だけだと分かりづらいので、たとえば以下のような構成の View の場合を考えてみます。</p>

<p><img src="/images/android_touch_event_sample_view.png" alt="Sample View" />
<code>`` text
FrameLayout1(白)
|-- FrameLayout2(赤)
</code>&mdash; FrameLayout3(緑)</p>

<pre><code>`- Button
</code></pre>

<p>```</p>

<p>この構成の場合、いずれの View もタッチイベントを処理しない、最もシンプルなイベントの流れは以下のようになります。</p>

<p><img src="/images/android_touch_event_flow_01.png" alt="TouchEvent Flow" /></p>

<p>(1) から (13) の順番で処理が流れ、 onInterceptTouchEvent() が呼び出される順番は (I) から (III) となり、肝心の onTouchEvent() が呼び出される順番は (i) から (iv) となります。</p>

<p>画面と照らし合わせてみると、ユーザから見て手前側の View から onTouchEvent() が呼び出されていることを確認できるかと思います。</p>

<h2>タッチイベントを処理した場合の流れ</h2>

<p>タッチイベントは以上の流れで伝搬していきますが、いずれかのメソッドで true が返された場合、そこで連鎖がとまり、以降の処理は実行されなくなります。</p>

<p>例として、以下のように Button で onTouchEvent() を処理して true を返してみます。
``` java
public class TouchTestActivity implements OnTouchListener {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    // ...
    findViewById(R.id.button).setOnTouchListener(this);
}

@Override
protected void onTouch(View v, MotionEvent event) {
    int id = v.getId();
    switch(id) {
    case R.id.button:
        Log.d(TAG, "Touched!");
        return true;
    }
    return false;
}
</code></pre>

<p>}
```</p>

<p>この場合、 Button の onTouchEvent() でイベントの伝搬が停止するため、 FrameLayout3 の onTouchEvent() はコールされず、 FrameLayout2 は onDispatchTouchEvent() すら呼ばれません。
つまり、ユーザから見て「触ってイベントが発生した View より後ろにある View」には onTouchEvent() が一切発生しないことになります。</p>

<p><img src="/images/android_touch_event_flow_02.png" alt="TouchEvent Flow" /></p>

<p>OnTouchListener を登録したり onTouchEvent() を直接処理したりする以外にも、良くある例だと View#setOnClickListener() で OnClickListener を登録した場合なども、 onTouchEvent() で true が返るようになり、それ以降の View の onTouchEvent() はキャンセルされることになります。</p>

<p>子の OnClickListener などに影響されずにタッチイベントを処理したい場合は、子を呼びだすより前に呼ばれる onInterceptTouchEvent() で必要な処理を行うという方法があります。
例えば <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.2.2_r1/android/widget/ScrollView.java#ScrollView.onInterceptTouchEvent%28android.view.MotionEvent%29">ScrollView</a> は子に影響されずにスクロール可能でなければならないため、 onInterceptTouchEvent() でスクロールの開始フラグを立てたりしています。</p>

<h2>onInterceptTouchEvent() で伝搬を止めた場合</h2>

<p>ViewGroup に実装されている onInterceptTouchEvent() で true を返すと、子供の View にイベントを伝搬しないようになります。</p>

<p>たとえば、以下のように onInterceptTouchEvent() で true を返すようにした CustomFrameLayout で FrameLayout3 を置き換えてみます。
``` java
public class CustomFrameLayout extends FrameLayout {</p>

<pre><code>// ...
@Override
public boolean onInterceptTouchEvent() {
    return true;
}
// ...
</code></pre>

<p>}
```</p>

<p>この場合、 FrameLayout3 が子供(Button)にイベントを伝搬しなくなるため、以下のようなイベントの発生順序になります。</p>

<p><img src="/images/android_touch_event_flow_03.png" alt="TouchEvent Flow" /></p>

<p>また <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.2.2_r1/android/widget/ScrollView.java#ScrollView.onInterceptTouchEvent%28android.view.MotionEvent%29">ScrollView</a> を例にあげると、スクロール中は子供のタッチイベントを発生させないようにする必要があるため、 onInterceptTouchEvent() が活用されている様子を見る事ができます。(イベントのアクションが MotionEvent.ACTION_MOVE かつドラッグ中フラグが立っていたら子へ伝搬させないなど)</p>

<p>また、この onInterceptTouchEvent() を使って親側から子へのイベントの伝搬が止められることがある場合、子供側から止めないようにお願いする事ができます。
イベントの伝搬を親側から止めないようにする場合は、親の <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestDisallowInterceptTouchEvent%28boolean%29">requestDisallowInterceptTouchEvent()</a> を呼びます。</p>

<p>```
public class TouchTestActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    // ...
    findViewById(R.id.button).getParent().requestDisqllowInterceptTouchEvent(true);
}
</code></pre>

<p>}
```</p>

<p><img src="/images/android_touch_event_flow_04.png" alt="TouchEvent Flow" /></p>

<p>requestDisallowInterceptTouchEvent(true) で onInterceptTouchEvent() を抑制した場合、親の onInterceptTouchEvent() が呼ばれないことになるので、子にイベントを流すようにするだけでなく、副産物的に onInterceptTouchEvent() で行っている処理を無視させることができます。</p>

<p>たとえば、 requestDisallowInterceptTouchEvent() と加えて、子の onTouchEvent() で true を返すなどしてイベントの伝搬を子で止めてしまえば ScrollView のスクロールを無効化できたりします。
このあたりを組み合わせると、入れ子状の ScrollView を実現できたりします。</p>

<h2>次回予告？</h2>

<p>自力でイベントをルーティングする場合の話や、 Action の話なども書こうと思いましたが、思ったより長くなってしまったので、気が向いたらまた次回書きます。</p>
]]></content>
  </entry>
  
</feed>
