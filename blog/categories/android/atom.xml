<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Unmotivated]]></title>
  <link href="http://blog.lciel.jp/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.lciel.jp/"/>
  <updated>2014-02-09T00:06:22+09:00</updated>
  <id>http://blog.lciel.jp/</id>
  <author>
    <name><![CDATA[lciel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android におけるストレージまとめ]]></title>
    <link href="http://blog.lciel.jp/blog/2014/02/08/android-about-storage/"/>
    <updated>2014-02-08T23:29:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2014/02/08/android-about-storage</id>
    <content type="html"><![CDATA[<p>Android で外部ファイルを保存する場合、どこに何を保存すれば良いのか？それぞれの違いは何なのか？<br/>
内蔵メモリなのか？SDカードなのか？</p>

<p>いい加減しっかり把握しておきたいと思ったので、まとめてみました。</p>

<!-- more -->


<h2>ざっくりまとめ</h2>

<p>それぞれの領域の名前は、この記事の中で区別するためにつけたもので、アクセス権減は非 root ユーザから見た図です。</p>

<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">ディレクトリ取得メソッド                   </th>
<th align="left">アプリ専用？</th>
<th align="left">ユーザがアクセス可能？</th>
<th align="left">クリア方法      </th>
<th align="left">アプリ削除時に</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">内部データ領域      </td>
<td align="left">Context.getFilesDir()                      </td>
<td align="left">yes         </td>
<td align="left">no                    </td>
<td align="left">データを消去    </td>
<td align="left">消える        </td>
</tr>
<tr>
<td align="left">内部キャッシュ領域  </td>
<td align="left">Context.getCacheDir()                      </td>
<td align="left">yes         </td>
<td align="left">no                    </td>
<td align="left">キャッシュを消去</td>
<td align="left">消える        </td>
</tr>
<tr>
<td align="left">外部データ領域      </td>
<td align="left">Context.getExternalFilesDir()              </td>
<td align="left">yes         </td>
<td align="left">yes                   </td>
<td align="left">データを消去    </td>
<td align="left">消える        </td>
</tr>
<tr>
<td align="left">外部キャッシュ領域  </td>
<td align="left">Context.getExternalCacheDir()              </td>
<td align="left">yes         </td>
<td align="left">yes                   </td>
<td align="left">キャッシュを消去</td>
<td align="left">消える        </td>
</tr>
<tr>
<td align="left">外部公開領域    </td>
<td align="left">Environment.getExternalStorageDirectory()      </td>
<td align="left">no          </td>
<td align="left">yes                   </td>
<td align="left">提供されず      </td>
<td align="left">消えない      </td>
</tr>
<tr>
<td align="left">外部公開共有領域</td>
<td align="left">Environment.getExternalStoragePublicDirectory()</td>
<td align="left">no          </td>
<td align="left">yes                   </td>
<td align="left">提供されず      </td>
<td align="left">消えない      </td>
</tr>
</tbody>
</table>


<p>　</p>

<ul>
<li>ユーザに見せたくないファイルは内部の領域を使う</li>
<li>消えるとアプリが維持できなくなるようなファイルは、内部データ領域</li>
<li>消えても全く問題ないような一時ファイルは、ユーザが消しやすいキャッシュ領域が良さそう</li>
<li>アプリが消えても消したくないファイルは、外部公開領域にディレクトリ掘って作る</li>
<li>端末全体に共有したいようなファイルは外部公開共有領域に入れる

<ul>
<li>カメラから取得した画像を保存するなら Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) にディレクトリ掘るとか</li>
<li>アプリで生成した画像を保存するなら Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURE) にディレクトリ掘るとか</li>
</ul>
</li>
</ul>


<h2>その他のまめ知識</h2>

<ul>
<li>キャッシュ領域にサイズ制限はないが、ストレージが圧迫されてくるとシステムによって消されることがあるらしい(未実験)

<ul>
<li><a href="http://stackoverflow.com/questions/2175843/limit-size-of-cache-directory">http://stackoverflow.com/questions/2175843/limit-size-of-cache-directory</a></li>
<li>逆に言うと消えることが保証されているわけではないので、容量制限などを行う場合は自分で実装する</li>
<li><a href="http://techbooster.org/android/application/16004/">こちら</a>によると 1MB 以下が推奨とあるが、現在もそうであるか不明。キャッシュ容量二桁MB越えのアプリは珍しくない気がする</li>
</ul>
</li>
<li>マルチアカウント利用されている場合でも、 Context からディレクトリを取得していれば良きに計らってくれるみたい

<ul>
<li><a href="http://techbooster.org/android/application/16004/">http://techbooster.org/android/application/16004/</a></li>
</ul>
</li>
<li>アプリをアンインストール時にも残しておきたいが、ユーザに見られたくない！消されたくない！は「できない」

<ul>
<li>このようなデータは公開領域に置くのが主流っぽいが、隠蔽することはできない</li>
<li>せいぜい見つけづらいところに置くくらいしかできないので、補助的に使うしかない</li>
</ul>
</li>
</ul>


<h2>保存先はSDカード？内蔵ストレージ？</h2>

<p>結論から言うと、 getExternal 系のメソッドでとれるディレクトリは、SDカードの場合もあれば内蔵ストレージの場合もあるようです。
基本的にアプリ側からSDカードを指定して扱うようなことは <strong>できない</strong> というのが正しそうです。</p>

<p>getExternal〜 でとれるディレクトリはシステムに決められたプライマリストレージであり、それがSDカードである保証はないということ。
よく getExternalStorageDirectory() でSDカード内のディレクトリがとれるという記事を見ますが、正確にはSDカードである可能性が高いディレクトリがとれるというのが正しそうです。
External という名前がついているので紛らわしいですが(というか完全に勘違いする)、これはSDカードのことをさしている訳ではなく、
システム領域の外のストレージという意味で External とついているようです。(<a href="http://developer.android.com/reference/android/os/Environment.html#getExternalStorageDirectory%28%29">参考</a>)</p>

<p>とはいえ getExternal〜 で取得したディレクトリを使う場合は、プライマリストレージがSDカードである可能性を考慮しなくてはいけないため、マウントされているかどうかなどを確かめる必要があります。</p>

<p>``` java
String state = Environment.getExternalStorageState()
if(state.equals(Environment.MEDIA_MOUNTED)){</p>

<pre><code>// マウントされていて read/write 可能
</code></pre>

<p>}else if(state.equals(Environment.MEDIA_MOUNTED_READ_ONLY)){</p>

<pre><code>// マウントされているが read 権限しかない
</code></pre>

<p>}else{</p>

<pre><code>// マウントされていない
</code></pre>

<p>}
```</p>

<p>今指定されているプライマリストレージが取り外し可能(普通はイコールSDカードになると思います)かどうかは以下を確認することで分かるので、取り外されるとまずい場合などは判別できそうです。</p>

<p>``` java
if(Environment.isExternalStorageRemovable()) {</p>

<pre><code>// 取り外し可能
</code></pre>

<p>}
```</p>

<p>ちなみに手持ちの 206SH / Android 4.2.2 で確認してみたところ、Environment のさしているプライマリストレージは内蔵メモリのようでした。</p>

<p>ついでに 206SH でプライマリストレージを切り替えられるのかどうかを調べてみたけれど、結局切り替わる条件は不明でした。
<code>java
端末設定 &gt; ストレージ &gt; 優先インストール先
</code>
あたりで切り替えられそうだなーと睨んで色々と試行錯誤してみましたが、プライマリストレージは変わりませんでした。</p>

<h2>(おまけ)各ディレクトリのファイルパスなど</h2>

<p>Nexus7 のほうは getExternal〜 でとれるディレクトリがマルチアカウント対応の Emulated なものになってました。
4.2 で追加されたマルチアカウントですが、 206SH では封じられているようです。</p>

<p>``` text 206SH/Android4.2.2</p>

<h1>各種ディレクトリ</h1>

<p>Context.getFilesDir()                           :/data/data/com.example/files
Context.getCacheDir()                           :/data/data/com.example/cache
Context.getExternalCacheDir()                   :/storage/sdcard0/Android/data/com.example/cache
Context.getExternalFilesDir()                   :/storage/sdcard0/Android/data/com.example/files
Environment.getExternalStorageDirectory()       :/storage/sdcard0
Environment.getExternalStoragePublicDirectory() :/storage/sdcard0/DCIM
Environment.isExternalStorageEmulated()         :false
Environment.isExternalStorageRemovable()        :false</p>

<h1>マウント状況 &ndash; getFilesDir() などでとれるところ</h1>

<p>/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,nosuid,nodev,noatime,discard,noauto_da_alloc,data=ordered 0 0</p>

<h1>マウント状況 &ndash; getExternalStorageDirectory() でとれるところ</h1>

<p>/dev/fuse /storage/sdcard0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</p>

<h1>マウント状況 &ndash; 実際のSDカードがマウントされているところ</h1>

<p>/dev/block/vold/179:33 /storage/sdcard0/external_sd vfat rw,dirsync,nosuid,nodev,noexec,relatime,uid=1000,gid=1015,fmask=0602,dmask=0602,allow_utime=0020,codepage=cp437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro 0 0
```</p>

<p>``` text Nexus7(2013)/Android4.4.2</p>

<h1>各種ディレクトリ</h1>

<p>Context.getFilesDir()                           :/data/data/com.example/files
Context.getCacheDir()                           :/data/data/com.example/cache
Context.getExternalCacheDir()                   :/storage/emulated/0/Android/data/com.example/cache
Context.getExternalFilesDir()                   :/storage/emulated/0/Android/data/com.example/files
Environment.getExternalStorageDirectory()       :/storage/emulated/0
Environment.getExternalStoragePublicDirectory() :/storage/emulated/0/DCIM
Environment.isExternalStorageEmulated()         :true
Environment.isExternalStorageRemovable()        :false</p>

<h1>マウント状況 &ndash; getFilesDir() などでとれるところ</h1>

<p>/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,noatime,nomblk_io_submit,errors=panic,data=ordered 0 0</p>

<h1>マウント状況 &ndash; getExternalStorageDirectory() でとれるところの実体？</h1>

<p>/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</p>

<h1>/storage/emulated に置いてあるシンボリックリンク</h1>

<p>shell@flo:/ $ ls -la /storage/emulated/
lrwxrwxrwx root     root              2014-01-30 19:47 legacy &ndash;> /mnt/shell/emulated/0
```</p>
]]></content>
  </entry>
  
</feed>
