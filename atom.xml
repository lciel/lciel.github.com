<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Unmotivated]]></title>
  <link href="http://blog.lciel.jp/atom.xml" rel="self"/>
  <link href="http://blog.lciel.jp/"/>
  <updated>2013-12-03T20:29:34+09:00</updated>
  <id>http://blog.lciel.jp/</id>
  <author>
    <name><![CDATA[lciel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android のタッチイベントを理解する(その1)]]></title>
    <link href="http://blog.lciel.jp/blog/2013/12/03/android-touch-event/"/>
    <updated>2013-12-03T20:31:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/12/03/android-touch-event</id>
    <content type="html"><![CDATA[<p>タッチイベントがうまく流れてこなくて困ったり、自力でイベントをルーティングしたりするときに困ったりと、ちょこちょことタッチイベントについて勉強したのでまとめておきます。<br/>
主にタッチイベントがどう流れてどう止まるかなどについて調べています。</p>

<p>イベントの流れを理解するには以下の資料がかなり参考になりました。</p>

<ul>
<li><a href="http://devsbuild.it/files/PRE_andevcon_mastering-the-android-touch-system.pdf">Mastering the Android Touch System (PDF)</a></li>
</ul>


<p>毎度のことながら、間違いがありましたらご指摘頂ければ幸いです。</p>

<!-- more -->


<h2>タッチイベントを処理する主要なメソッド</h2>

<p>実際の流れを理解する前に、主要なメソッドを三つ紹介しておきます。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> <strong>メソッド名</strong> </th>
<th align="left"> <strong>概要</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> onTouchEvent() (<a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent">View</a>) </td>
<td align="left"> タッチイベントに対して何かを処理するメソッド。setOnTouchListener() で登録した listener はこのタイミングで呼び出される。</td>
</tr>
<tr>
<td></td>
<td align="left"> onInterceptTouchEvent() (<a href="http://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent">ViewGroup</a>) </td>
<td align="left"> タッチイベントが子供へと伝搬することを阻止できるメソッド。</td>
</tr>
<tr>
<td></td>
<td align="left"> dispatchTouchEvent() (<a href="http://developer.android.com/reference/android/app/Activity.html#dispatchTouchEvent(android.view.MotionEvent">Activity</a>, <a href="http://developer.android.com/reference/android/view/View.html#dispatchTouchEvent(android.view.MotionEvent">View</a>, <a href="http://developer.android.com/reference/android/view/ViewGroup.html#dispatchTouchEvent(android.view.MotionEvent">ViewGroup</a>) </td>
<td align="left"> タッチイベントを受け取り、子に伝搬させるかどうか、自分が処理するかどうかなどを管理する。onInterceptTouchEvent() や onTouchEvent() を呼ぶ人。</td>
</tr>
</tbody>
</table>


<p>　</p>

<h2>基本的なタッチイベントの流れ</h2>

<p>タッチイベントは Activity を経由して PhoneWindow 直下の DecorView から伝搬が始まり、親の View からその子 View へと dispatchTouchEvent() なるメソッドを通じて伝搬していきます。</p>

<p>dispatchTouchEvent() は 自身が ViewGroup だった場合、まず自身の onInterceptTouchEvent() を呼び出します。
onInterceptTouchEvent() では子にイベントを渡すかどうかなどを判断します(後で詳しく説明します)。</p>

<p>次に、子の dispatchTouchEvent() を呼び出してイベントを渡していきます。
このとき、親が子の dispatchTouchEvent() を呼び出す順番は、一番新しく追加した子から古い子へと逆順に渡していきます。</p>

<p>そして、最後に一般的にタッチイベントを処理するメソッドである onTouchEvent() が dispatchTouchEvent() によって呼ばれます。
この onTouchEvent() は、子から親へと逆順(ユーザから見ると手前に表示されている順)に流れていくようになっています。</p>

<p>文章だけだと分かりづらいので、たとえば以下のような構成の View の場合を考えてみます。</p>

<p><img src="http://blog.lciel.jp/images/android_touch_event_sample_view.png" alt="Sample View" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>FrameLayout1(白)
</span><span class='line'>|-- FrameLayout2(赤)
</span><span class='line'>`-- FrameLayout3(緑)
</span><span class='line'>    `- Button
</span></code></pre></td></tr></table></div></figure>


<p>この構成の場合、いずれの View もタッチイベントを処理しない、最もシンプルなイベントの流れは以下のようになります。</p>

<p><img src="http://blog.lciel.jp/images/android_touch_event_flow_01.png" alt="TouchEvent Flow" /></p>

<p>(1) から (13) の順番で処理が流れ、 onInterceptTouchEvent() が呼び出される順番は (I) から (III) となり、肝心の onTouchEvent() が呼び出される順番は (i) から (iv) となります。</p>

<p>画面と照らし合わせてみると、ユーザから見て手前側の View から onTouchEvent() が呼び出されていることを確認できるかと思います。</p>

<h2>タッチイベントを処理した場合の流れ</h2>

<p>タッチイベントは以上の流れで伝搬していきますが、いずれかのメソッドで true が返された場合、そこで連鎖がとまり、以降の処理は実行されなくなります。</p>

<p>例として、以下のように Button で onTouchEvent() を処理して true を返してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TouchTestActivity</span> <span class="kd">implements</span> <span class="n">OnTouchListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button</span><span class="o">).</span><span class="na">setOnTouchListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onTouch</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span><span class='line'>        <span class="k">switch</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Touched!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、 Button の onTouchEvent() でイベントの伝搬が停止するため、 FrameLayout3 の onTouchEvent() はコールされず、 FrameLayout2 は onDispatchTouchEvent() すら呼ばれません。
つまり、ユーザから見て「触ってイベントが発生した View より後ろにある View」には onTouchEvent() が一切発生しないことになります。</p>

<p><img src="http://blog.lciel.jp/images/android_touch_event_flow_02.png" alt="TouchEvent Flow" /></p>

<p>OnTouchListener を登録したり onTouchEvent() を直接処理したりする以外にも、良くある例だと View#setOnClickListener() で OnClickListener を登録した場合なども、 onTouchEvent() で true が返るようになり、それ以降の View の onTouchEvent() はキャンセルされることになります。</p>

<p>子の OnClickListener などに影響されずにタッチイベントを処理したい場合は、子を呼びだすより前に呼ばれる onInterceptTouchEvent() で必要な処理を行うという方法があります。
例えば <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.2.2_r1/android/widget/ScrollView.java#ScrollView.onInterceptTouchEvent%28android.view.MotionEvent%29">ScrollView</a> は子に影響されずにスクロール可能でなければならないため、 onInterceptTouchEvent() でスクロールの開始フラグを立てたりしています。</p>

<h2>onInterceptTouchEvent() で伝搬を止めた場合</h2>

<p>ViewGroup に実装されている onInterceptTouchEvent() で true を返すと、子供の View にイベントを伝搬しないようになります。</p>

<p>たとえば、以下のように onInterceptTouchEvent() で true を返すようにした CustomFrameLayout で FrameLayout3 を置き換えてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomFrameLayout</span> <span class="kd">extends</span> <span class="n">FrameLayout</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、 FrameLayout3 が子供(Button)にイベントを伝搬しなくなるため、以下のようなイベントの発生順序になります。</p>

<p><img src="http://blog.lciel.jp/images/android_touch_event_flow_03.png" alt="TouchEvent Flow" /></p>

<p>また <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.2.2_r1/android/widget/ScrollView.java#ScrollView.onInterceptTouchEvent%28android.view.MotionEvent%29">ScrollView</a> を例にあげると、スクロール中は子供のタッチイベントを発生させないようにする必要があるため、 onInterceptTouchEvent() が活用されている様子を見る事ができます。(イベントのアクションが MotionEvent.ACTION_MOVE かつドラッグ中フラグが立っていたら子へ伝搬させないなど)</p>

<p>また、この onInterceptTouchEvent() を使って親側から子へのイベントの伝搬が止められることがある場合、子供側から止めないようにお願いする事ができます。
イベントの伝搬を親側から止めないようにする場合は、親の <a href="http://developer.android.com/reference/android/view/ViewParent.html#requestDisallowInterceptTouchEvent%28boolean%29">requestDisallowInterceptTouchEvent()</a> を呼びます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TouchTestActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button</span><span class="o">).</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisqllowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://blog.lciel.jp/images/android_touch_event_flow_04.png" alt="TouchEvent Flow" /></p>

<p>requestDisallowInterceptTouchEvent(true) で onInterceptTouchEvent() を抑制した場合、親の onInterceptTouchEvent() が呼ばれないことになるので、子にイベントを流すようにするだけでなく、副産物的に onInterceptTouchEvent() で行っている処理を無視させることができます。</p>

<p>たとえば、 requestDisallowInterceptTouchEvent() と加えて、子の onTouchEvent() で true を返すなどしてイベントの伝搬を子で止めてしまえば ScrollView のスクロールを無効化できたりします。
このあたりを組み合わせると、入れ子状の ScrollView を実現できたりします。</p>

<h2>次回予告？</h2>

<p>自力でイベントをルーティングする場合の話や、 Action の話なども書こうと思いましたが、思ったより長くなってしまったので、気が向いたらまた次回書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + Disqus でコメントを表示しようとしたがうまくいかなかった話]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/30/octopress-unable-load-disqus/"/>
    <updated>2013-11-30T22:16:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/30/octopress-unable-load-disqus</id>
    <content type="html"><![CDATA[<p>Octopress ルートディレクトリの _config.xml の disqus_short_name に short_name を書き込むだけで Disqus と連携されてコメントモジュールが表示される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>disqus_short_name: &lt;short_name&gt;</span></code></pre></td></tr></table></div></figure>


<p>ところが以下のエラーが表示されてしまい、コメントモジュールがロードされない。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.</span></code></pre></td></tr></table></div></figure>


<p>オチは Disqus の short_name を理解していなかったのが原因で、ずっと Disqus ID を disqus_short_name に書き込んでいたのが問題だった。 # Disqus 使ったこと無かった上に説明を読んでなかった</p>

<p>Disqus では、コメントを投稿する単位としてまず Site を登録する必要があり、この Site の識別子として使われるのが short_name だった。
Disqus にログインした状態で<a href="http://disqus.com/register">ここ</a>にアクセスして Site を登録したところ、無事に short_name が生成された。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StackTrace を文字列として取得する]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/29/get-stacktrace-strings/"/>
    <updated>2013-11-29T20:45:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/29/get-stacktrace-strings</id>
    <content type="html"><![CDATA[<p>Java において StackTrace を取得する。<br/>
どこかに仕込んでおくとデバッグ時に何かと便利。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getStackTrace</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StackTraceElement</span><span class="o">[]</span> <span class="n">stacks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Throwable</span><span class="o">().</span><span class="na">getStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">StackTraceElement</span> <span class="n">e</span> <span class="o">:</span> <span class="n">stacks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="n">stacks</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;\tat %s(%s:%s)&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMethodName</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">getFileName</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">getLineNumber</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewGroup では onDraw() の代わりに dispatchDraw() が呼ばれる]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/27/viewgroup-dispatchdraw/"/>
    <updated>2013-11-27T20:18:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/27/viewgroup-dispatchdraw</id>
    <content type="html"><![CDATA[<p>FrameLayout で onDraw() のタイミングで処理をしたいが、どうも onDraw() が呼ばれないように見える。</p>

<p>確認したところ、 ViewGroup を継承したクラスは onDraw() の代わり dispatchDraw() が呼ばれるようだった。<br/>
(その名の通り子の View に対して draw() をコールしたりしなかったりするメソッド)</p>

<p>ViewGroup を継承したクラスに対して onDraw() のタイミングで実行したい処理は、 dispatchDraw() に書けば問題なさそう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">dispatchDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">        canvas に対して処理をしたりなんだり...</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">dispatchDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress の preview は generate を兼ねる]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/26/octopress-preview-include-generate/"/>
    <updated>2013-11-26T21:10:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/26/octopress-preview-include-generate</id>
    <content type="html"><![CDATA[<p>今まで気がつかなかったけれど、わざわざ generate してから preview しなくても、 preview 中に source ファイルを書き換えれば勝手にそれを検知して regenerate してくれるっぽい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ rake preview
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; compass is watching for changes. press ctrl-c to stop.
</span><span class='line'>&lt;ここでファイルを編集&gt;
</span><span class='line'>[2013-11-25 22:35:05] regeneration: 1 files changed
</span></code></pre></td></tr></table></div></figure>


<p>これは便利！
ちなみに新規ファイルを保存してもきちんと捕足して regenerate してくれるみたい。<br/>
投稿のハードルを限りなく低くしたいと思っている身からは、preview を立てっぱなしに出来るのは捗りそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 4.3 で ImageView#getImageMatrix() の挙動が変わっている]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/25/imageview-getimagematrix/"/>
    <updated>2013-11-25T11:19:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/25/imageview-getimagematrix</id>
    <content type="html"><![CDATA[<p>今まで ImageView#getImageMatrix() で取得した Matrix のインスタンスに対して、直接 post*() のメソッドを呼んだりして操作すれば表示に反映されていたが、どうやら 4.3 で挙動が変わったご様子。</p>

<p>結論から言うと、横着せずにちゃんと毎回 setImageMatrix() をしてやるか、はじめに setImageMatrix() してから getImageMatrix() を使うようにすれば想定通りに動作する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ImageView</span> <span class="n">imageView</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">imageView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="mf">2.0f</span><span class="o">;</span>
</span><span class='line'><span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">imageView</span><span class="o">.</span><span class="na">getImageMatrix</span><span class="o">();</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">ratio</span><span class="o">,</span> <span class="n">ratio</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ImageView</span> <span class="n">imageView</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">imageView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Matrix</span><span class="o">();</span>
</span><span class='line'><span class="n">imageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="mf">2.0f</span><span class="o">;</span>
</span><span class='line'><span class="n">matrix</span> <span class="o">=</span> <span class="n">imageView</span><span class="o">.</span><span class="na">getImageMatrix</span><span class="o">();</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">ratio</span><span class="o">,</span> <span class="n">ratio</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>どう変わってるのか確認</h3>

<p>4.2 以前では mMatrix (initImageView()で初期化されてる)がそのまま返っているのに対して、 4.3 以降では mDrawMatrix が返るようになっている。
(mDrawMatrix は configureBounds() でセットされている)</p>

<p>mDrawMatrix がセットされていない状態だと、その場で Matrix のインスタンスが作られているため、このインスタンスに対して直接操作を行っても反映されないというわけでした。</p>

<figure class='code'><figcaption><span>4.2_r1 android.widget.ImageView#getImageMatrix()</span><a href='http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.2_r1/android/widget/ImageView.java#ImageView.getImageMatrix%28%29'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Matrix</span> <span class="nf">getImageMatrix</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mMatrix</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>4.3_r1 android.widget.ImageView#getImageMatrix()</span><a href='http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.3_r1/android/widget/ImageView.java#ImageView.getImageMatrix%28%29'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Matrix</span> <span class="nf">getImageMatrix</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mDrawMatrix</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Matrix</span><span class="o">(</span><span class="n">Matrix</span><span class="o">.</span><span class="na">IDENTITY_MATRIX</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mDrawMatrix</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Android はマイナーバージョンアップでも、結構こういう細かい挙動変更が入ってくるので、以前動いていたものが突然動かなくなることが良くあるのだけれど、Android のコードを直接見に行けば答えが書いてあるので安心感がありますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ListView で onItemClick() と onItemLongClick() を両立]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/22/onitemclick-vs-onitemlongclick/"/>
    <updated>2013-11-22T18:50:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/22/onitemclick-vs-onitemlongclick</id>
    <content type="html"><![CDATA[<p>ListView で onItemClick() と onItemLongClick() を同時に仕掛けた際に、指を離すタイミングによっては onItemLongClick() に続けて onItemClick() が呼ばれてしまう。</p>

<p>一般的な Touch Event の例に漏れず、 onItemLongClick() で true を返しておけば、その後のイベントはキャンセルされる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemClick</span><span class="o">(</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;</span> <span class="n">parent</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">        なんやかんや</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onItemLongClick</span><span class="o">(</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;</span> <span class="n">parent</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">        なんやかんや</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>    <span class="c1">// これで onItemLongClick() のあとに onItemClick() が呼ばれなくなる</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewFlipper の InAnimation を1つ目には適用しない]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/21/disable-in-animation-of-viewflipper/"/>
    <updated>2013-11-21T20:58:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/21/disable-in-animation-of-viewflipper</id>
    <content type="html"><![CDATA[<p>ViewFlipper に InAnimation を設定した状態で startFlipping() をコールした際に、1つ目の View にも InAnimation が適用されてしまうのを回避したい。</p>

<p>AutoStart を指定せずに明示的に startFlipping() をコールした後に setInAnimation() してやれば OK</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ViewFlipper</span> <span class="n">viewFlipper</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewFlipper</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">viewFlipper</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// viewFlipper.setAutoStart(true);</span>
</span><span class='line'><span class="n">viewFlipper</span><span class="o">.</span><span class="na">startFlipping</span><span class="o">();</span>
</span><span class='line'><span class="n">viewFlipper</span><span class="o">.</span><span class="na">setInAnimation</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">fadein</span><span class="o">);</span>
</span><span class='line'><span class="n">viewFlipper</span><span class="o">.</span><span class="na">setOutAnimation</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">anim</span><span class="o">.</span><span class="na">fadeout</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 端末のシェアを視覚的に見る]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/21/android-fragmentation-visualized/"/>
    <updated>2013-11-21T20:46:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/21/android-fragmentation-visualized</id>
    <content type="html"><![CDATA[<p>OpenSignal が公開してくれている、 Android 端末毎のシェアを視覚的に表示してくれるサービス。</p>

<ul>
<li><a href="http://opensignal.com/reports/fragmentation-2013/">Android Fragmentation Visualized</a></li>
</ul>


<p>こうみると SAMSUNG 一強だな。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 2.x で表示される ScrollView の端のフェード(Fading Edge)を消す]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/21/remove-fading-edge/"/>
    <updated>2013-11-21T20:30:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/21/remove-fading-edge</id>
    <content type="html"><![CDATA[<p>Android 2.x 系ではスクロール可能な方向に Fading Edge が表示されるが、それを消したい。</p>

<h3>fadingEdge を指定する方法</h3>

<ul>
<li>xml で指定</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;ScrollView</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="na">android:fadingEdge=</span><span class="s">&quot;none&quot;</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ICS 以上では android:requiresFadingEdge が代わりに適用される</li>
</ul>


<h3>fadingEdgeLength を 0dp に指定する方法</h3>

<ul>
<li>xml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;ScrollView</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="na">android:fadingEdgeLength=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>直接コードで指定する場合はこう</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ListView</span> <span class="n">listView</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">listView</span><span class="o">);</span>
</span><span class='line'><span class="n">listView</span><span class="o">.</span><span class="na">setFadingEdgeLength</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログ(また)はじめました]]></title>
    <link href="http://blog.lciel.jp/blog/2013/11/21/about/"/>
    <updated>2013-11-21T20:14:00+09:00</updated>
    <id>http://blog.lciel.jp/blog/2013/11/21/about</id>
    <content type="html"><![CDATA[<p>投稿の敷居を極限まで下げてみたので、久しぶりにブログを書き始めてみます。</p>

<p>基本的に、普段書いているメモを切り取って投げるだけなので、スニペットやら調査の結果やらばかりになるかと思います。</p>

<p>3日坊主にならないように、適当にがんばります。</p>
]]></content>
  </entry>
  
</feed>
